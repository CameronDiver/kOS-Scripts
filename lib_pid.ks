// Library implementing a general PID control loop
// Implemented based on youtube user dunbar9finger

@LAZYGLOBAL off.

// Initialise the PID structures ready for the loop
declare function pid_setup {
  declare parameter pGain, iGain, dGain.
  // Setup the structure we need
  local paramList to list().
  local desiredP to 0. // Will get set later
  local p to 0.
  local i to 0.
  local d to 0.
  local lastT to -1. // Last time value
  local prevVal to 0. // Previous PID value

  paramList:add(pGain).     // [0]
  paramList:add(iGain).     // [1]
  paramList:add(dGain).     // [2]
  paramList:add(desiredP).  // [3]
  paramList:add(p).         // [4]
  paramList:add(i).         // [5]
  paramList:add(d).         // [6]
  paramList:add(lastT).     // [7]
  paramList:add(prevVal).   // [8]

  return paramList.
}

declare function pid_seek {
  // params = parameters generated by the pid_setup(...) function
  // seekVal = The value we want
  // currVal = The current value
  declare parameter params, seekVal, currVal.

  // unpack the structure (perhaps don't do this for optimisation reasons?)
  local pGain to params[0].
  local iGain to params[1].
  local dGain to params[2].
  local oldS to params[3]. // The old desired p value
  local oldP to params[4].
  local oldI to params[5].
  local oldD to params[6].
  local lastT to params[7].
  local prev to params[8]. // Previous PID output (for when no change necessary)

  local p to seekVal - currVal.
  local i to 0. // defaults
  local d to 0.

  local new to prev. // In case no output change

  local t to time:seconds.
  local dT to t - lastT. // Change in time since last update

  if lastT < 0 {
    // None of the values have been setup so the output would be worthless
    // Just do nothing this time, setting the structure values at the end
    // and next time we will do something with actual data
  } else {
    set d to (p - oldP) / dT. // "fake" derivative of P
    set i to (oldI + p) * dT. // "fake" integral of P

    set new to pGain * p + iGain * i + dGain * d.
  }

  // Set the structure to the correct values from this iteration
  set params[3] to seekVal.
  set params[4] to p.
  set params[5] to i.
  set params[6] to d.
  set params[7] to t.
  set params[8] to new.

  return new.
}
